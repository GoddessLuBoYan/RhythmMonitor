<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ assembly name="EnvDTE" #>
<#@ output extension=".cs" #>
<#
EnvDTE.DTE dte = (EnvDTE.DTE) ((IServiceProvider) this.Host)
                       .GetService(typeof(EnvDTE.DTE));
var projectPath = dte.ActiveDocument.Path;
var NoteTypeFilePath = Path.Combine(projectPath, "NoteType.cs");
var content = File.ReadAllText(NoteTypeFilePath);
var matches = Regex.Matches(content, @"(\w*) = (\w*)");
var NoteTypeNames = new List<string>();
foreach(Match m in matches)
{
    NoteTypeNames.Add(m.Groups[1].Value);
}
#>
using System;
using UnityEngine;
/*
<# foreach(var name in NoteTypeNames) { #>
public partial class <#=name#>Note:ImdNoteBase { }
<# } #>
*/
public class ImdNoteFactory:MonoBehaviour, INoteFactory
{
    public INoteInfo Create(NoteType type, double value) { return Create(type, 0, -1, value); }
    public INoteInfo Create(NoteType type, int timestamp, double value) { return Create(type, timestamp, -1, value); }
    public INoteInfo Create(NoteType type, int timestamp, int trackId) { return Create(type, timestamp, trackId, 0); }
    public INoteInfo Create(NoteType type, int timestamp, int trackId, double value)
    {
        GameObject go;
        INoteInfo t;
        switch(type)
        {
<# foreach(var name in NoteTypeNames) { var type = name + "Note"; #>
            case NoteType.<#=name#>:
                go = new GameObject();
                t = go.GetOrAddComponent<<#=type#>>();
                t.Type = type;
                t.Timestamp = timestamp;
                t.TrackId = trackId;
                t.Value = value;
                go.name = t.ToString();
                go.transform.parent = this.transform;
                break;
<# } #>
            default:
                Debug.LogError($"未知的NoteType: {type}");
                t = null;
                break;
        }
        return t;
    }
}